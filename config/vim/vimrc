"
" Theme
"

let g:solarized_termcolors=256
let g:solarized_italic=1
let g:solarized_bold=1
let g:solarized_underlined=1
let g:solarized_contrast="high"
let g:solarized_visibility="low"

set list " show whitespaces (plugin vim-sensitive does the same)
syntax enable
set background=dark
colorscheme solarized

set relativenumber
set number
set colorcolumn=120 " draw a vertical axis at 120
set mouse=a

"
" Behaviours
"
set wildignore+=*.o,*.a,*.swp,*.class
set noswapfile nobackup
set nofixeol noeol
set ignorecase smartcase
set fileformats=unix,dos,mac
set breakindent
set autowriteall
set splitright
set hlsearch "<C-l> turns off see:vim-sensible

let mapleader = ","

nnoremap <leader>, :

"
" Fuzzy Search everywhere
"
if $FZF_HOME == ""
  let $FZF_HOME = '/usr/local/opt/fzf'
endif
set rtp+=$FZF_HOME " needs to be installed see https://github.com/junegunn/fzf

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nnoremap <leader>t :Ag!<Space>
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :BLines<CR>

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

"
" Go Language
"
let g:go_fmt_command = "goimports"

nnoremap <leader>gt :w<CR>:GoTestFunc<CR>
nnoremap <leader>gT :w<CR>:GoTest<CR>
nnoremap <leader>gb :w<CR>:GoBuild<CR>
nnoremap <leader>gi :w<CR>:GoInstall<CR>
nnoremap <leader>d  :w<CR>:GoDoc<CR>
nnoremap <leader>gr :w<CR>:GoRun<CR>

"let g:go_fmt_autosave = 0 " Testing gofmt

"
" Terraform
"
let g:terraform_align=1
let g:terraform_fmt_on_save=0

"
" Crontab
"
autocmd filetype crontab setlocal nobackup nowritebackup " avoid issues: crontab: temp file must be edited in place

" Source private vimrc
"runtime private.vimrc

"
" Python
"
filetype plugin indent on

let g:jedi#use_splits_not_buffers="right"

command! Isort execute ':silent !isort --profile black %' | execute ':redraw!'
au BufWritePost *.py :ALEFix
au BufWritePost *.py :Isort

let g:ale_linters = {
      \'python': ['pylint', 'mypy'],
      \}

let g:ale_fixers = {
      \ 'python': ['pycln'],
      \}

let g:ale_virtualtextcursor = 'disabled'
let g:ale_sign_column_always = '1'
"let g:ale_fix_on_save = 1

if filereadable(expand('~/.vimrcprivate'))
  source ~/.vimrcprivate
endif

